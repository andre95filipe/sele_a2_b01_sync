#include <pcd8544.h>
#include <pcd8544_ascii.h>
#include <spi.h>

const uint8_t lindo_Width    = 84;
const uint8_t lindo_Height   = 48;
const uint8_t lindo_Bitmap[] = { 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xfe, 0xfe, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0xc1, 0xf9, 0xf9, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xd5, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0x1e, 0x3e, 0x3c, 0x7c, 0x7c, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf8, 0xfc, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x03, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x07, 0x00, 0x00, 0x08, 0x00, 0x70, 0xf2, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf1, 0xf0, 0xe1, 0x01, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x7f, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xff, 0xff, 0x1e, 0x3f, 0xfd, 0xff, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe0, 0xcf, 0xdf, 0x9f, 0x9f, 0x1f, 0x1f, 0x8f, 0x87, 0xff, 0xff, 0xff, 0xf3, 0x60, 0x01, 0x01, 0x01, 0x01, 0x03, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x13, 0x37, 0x77, 0x7e, 0x7c, 0x70, 0x60, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x07, 0x0f, 0x18, 0x10, 0x13, 0x2f, 0x1f, 0x1f, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x2f, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0x0f, 0x9f, 0x4f, 0x47, 0x66, 0x74, 0x3c, 0x7c, 0x38, 0x30, 0x90, 0x90, 0x90, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe4, 0xf4, 0xf7, 0xf3, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x00, 0x06, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x03, 0x01, 0x02, 0x02, 0x03, 0x01, 0x00, 0x60, 0xf8, 0xfe, 0xff, 0xbf, 0xff
};

void PCD8544::begin() {
    SPI.begin(MSB, MASTER, MODE0, FOSC_16);
    // SET RST and DC as outputs
    DDRB |= _BV(DC) | _BV(RST); 

    // Set RST = 1 and DC = 0
    PORTB |= _BV(RST);
    PORTB &= ~_BV(DC);

    // Reset LCD
    PORTB &= _BV(RST);
    delay(100);
    PORTB |= _BV(RST);

    this->write(0x21, COMMAND); // Use Extended instruction set
    this->write(0x13, COMMAND); // Bias system (1:48)
    this->write(0xc2, COMMAND); // Vop 3.06 + 66 * 0.06 = 7V
    this->write(0x20, COMMAND); // Use basic instruction set

    this->write(0x09, COMMAND); // All display segments on

    this->clear();              // Clear screen

    this->write(0x08, COMMAND); // Set display blank
    this->write(0x0c, COMMAND); // Set normal mode

    delay(100);

    this->setCursor(0, 0);
}

void PCD8544::setCursor(uint8_t x, uint8_t y) {
    this->write(0x80 | x, COMMAND);
    this->write(0x40 | y, COMMAND);
}

void PCD8544::clear() {
    this->setCursor(0, 0);
    for(uint16_t i = 0; i < X * Y; i++)
        this->write(0x00, DATA);
    this->setCursor(0, 0);
}

void PCD8544::drawBitmap() {
    this->setCursor(0, 0);
    for(uint16_t i = 0; i < X * Y; i++){
        this->write(lindo_Bitmap[i], DATA);
    }
        
    this->setCursor(0, 0);
}

void PCD8544::write(uint8_t data, uint8_t dc) {
    PORTB = dc ? PORTB | _BV(DC) : PORTB & ~_BV(DC);
    SPI.transmit(data);
}

void PCD8544::print(const char c) {
    for (uint8_t i = 0; i < 5; i++)
        this->write(ASCII[c - 0x20][i], DATA);
    this->write(0x00, DATA);
}

void PCD8544::print(const char *c) {
    while(*c)
        this->print(*c++);
}
